#!/usr/bin/env groovy
/* Artifactory configuration and custom taks classes for build script
   for FIDATA Infrastructure
   Copyright Â© 2018  Basil Peace

   This file is part of FIDATA Infrastructure.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

buildscript {
  repositories {
    maven {
      url 'https://fidata.jfrog.io/fidata/plugins-snapshot'
      credentials {
        username = artifactoryUser
        password = artifactoryPassword
      }
    }
  }
  dependencies {
    classpath 'commons-io:commons-io:2.5'
    classpath 'org.jfrog.artifactory.client:artifactory-java-client-services:+'
    configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
  }
}
apply plugin: 'com.jfrog.artifactory'

import org.jfrog.artifactory.client.ArtifactoryClientBuilder
import org.jfrog.artifactory.client.UploadableArtifact
import org.jfrog.artifactory.client.ArtifactoryRequest
import org.jfrog.artifactory.client.impl.ArtifactoryRequestImpl
import org.jfrog.artifactory.client.ArtifactoryResponse
import org.apache.commons.io.FilenameUtils
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

ext.with {
  artifactoryUrl = 'https://fidata.jfrog.io/fidata'
  artifacts = [:]
}

artifactory {
  publish {
    publishBuildInfo = false
    publishArtifacts = false
    publishPom = false
    publishIvy = false
  }
  clientConfig.setIncludeEnvVars(true)
  clientConfig.setEnvVarsExcludePatterns('*KEY*')
  clientConfig.setEnvVarsExcludePatterns('*PASSWORD*')
}
afterEvaluate {
  ext.buildName = project.convention.plugins.artifactory.clientConfig.info.buildName
  ext.buildNumber = project.convention.plugins.artifactory.clientConfig.info.buildNumber
}

ext.artifactoryClient = ArtifactoryClientBuilder.create()
    .setUrl(artifactoryUrl)
    .setUsername(artifactoryUser)
    .setPassword(artifactoryPassword)
    .build()

class ArtifactoryGenericPublish extends DefaultTask {
  @InputFile
  File file
  @Input
  String repository
  @Input
  String module
  @Input
  Map<String, Object> properties
  
  @TaskAction
  void publish() {
    UploadableArtifact uploadableArtifact = project.ext.artifactoryClient.repository(repository)
      .upload(file.name, file)
      .bySha1Checksum()
      .withProperty('build.name', project.ext.buildName)
      .withProperty('build.number', project.ext.buildNumber)
    if (properties) {
      properties.each { key, value -> uploadableArtifact.withProperty(key, value) }
    }
    org.jfrog.artifactory.client.model.File deployedArtifact = uploadableArtifact.doUpload()
    Map<String, String> deployedArtifactMetadata = ['sha1': deployedArtifact.checksums.sha1, 'name': deployedArtifact.name, type: FilenameUtils().getExtension(deployedArtifact.name)]
    if (project.ext.artifacts.containsKey(module)) {
      project.ext.artifacts[module] << deployedArtifactMetadata
    } else {
      project.ext.artifacts[module] = [deployedArtifactMetadata]
    }
  }
  
}

task('publishBuildInfo') {
  dependsOn 'artifactoryPublish'
  doLast {
    def buildInfo = new JsonSlurper().parse(project.file(project.convention.plugins.artifactory.clientConfig.exportFile))
    buildInfo['modules'] = (buildInfo['modules'] ?: []) + project.ext.artifacts.collect { key, value -> [id: key, artifacts: value] }
    ArtifactoryRequest uploadBuildInfoRequest = new ArtifactoryRequestImpl().apiUrl('api/build')
      .method(ArtifactoryRequest.Method.PUT)
      .requestType(ArtifactoryRequest.ContentType.JSON)
      .requestBody(new JsonOutput().toJson(buildInfo))
    ArtifactoryResponse response = project.ext.artifactoryClient.restCall(uploadBuildInfoRequest)
    if (!response.successResponse) {
      logger.error('publishBuildInfo: unsuccessful. Status line: {}', statusLine) // TOTEST
    }
  }
}
